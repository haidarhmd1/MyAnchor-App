// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaxonomyType {
  LOCATION
  CHALLENGE
  AVOIDANCE_REASON
  SYMPTOM
  STOP_REASON
  AFTER_ATTACK_ACTION
  KEPT_GOING_REASON
  SKIPPED_CHALLENGE_REASON
}

enum WhenDidItHappen {
  MORNING
  NOON
  AFTERNOON
  EVENING
  NIGHT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Company {
  ALONE
  WITH_OTHERS
}

enum ChallengeStatus {
  NOT_STARTED
  FINISHED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  dob           DateTime?
  gender        Gender?
  image         String?
  deletedAt     DateTime? // soft delete

  signInAudits SignInAudit[]
  consents     Consent[]

  // NEW: relations
  challenges Challenge[]
  journals   Journal[]

  customTaxonomies CustomTaxonomy[]
  userTaxonomies   UserTaxonomy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model TaxonomyGroup {
  id        String       @id @default(cuid())
  type      TaxonomyType
  slug      String
  label     String
  sortOrder Int          @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  taxonomies       Taxonomy[]
  customTaxonomies CustomTaxonomy[]

  // unique per type to prevent duplicates, and a global unique slug helps cross-links if you prefer
  @@unique([type, slug])
}

model Taxonomy {
  id          String       @id @default(cuid())
  type        TaxonomyType
  slug        String       @unique // stable identifier from your ids
  label       String
  description String?
  difficulty  Difficulty?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userLinks UserTaxonomy[]

  groupId String?
  group   TaxonomyGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  sortOrder Int         @default(0) // optional fine-grained ordering within group
  Challenge Challenge[]

  @@index([type, groupId, sortOrder])
}

model CustomTaxonomy {
  id              String       @id @default(cuid())
  userId          String
  type            TaxonomyType
  label           String
  normalizedLabel String // lowercased, trimmed, single-spaced
  description     String?
  difficulty      Difficulty?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userLinks UserTaxonomy[]

  taxonomyGroupId String?

  groupId String?
  group   TaxonomyGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  sortOrder Int @default(0)

  @@unique([userId, type, normalizedLabel])
  @@index([type, groupId, sortOrder])
}

model UserTaxonomy {
  id            String    @id @default(cuid())
  userId        String
  taxonomyId    String?
  customId      String?
  firstSeenAt   DateTime?
  lastSeenAt    DateTime?
  timesSelected Int       @default(0)

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  taxonomy Taxonomy?       @relation(fields: [taxonomyId], references: [id], onDelete: SetNull)
  custom   CustomTaxonomy? @relation(fields: [customId], references: [id], onDelete: SetNull)

  @@unique([userId, taxonomyId])
  @@unique([userId, customId])
  @@index([userId, lastSeenAt])
}

model EmailOTP {
  id         String    @id @default(cuid())
  email      String    @db.VarChar(255)
  tokenHash  String    @db.VarChar(255)
  expiresAt  DateTime
  consumedAt DateTime?
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())
  ip         String?
  userAgent  String?

  @@index([email])
  @@index([expiresAt])
}

model EmailLog {
  id         String   @id @default(cuid())
  toEmail    String   @db.VarChar(255)
  template   String?
  providerId String?
  success    Boolean
  error      String?
  createdAt  DateTime @default(now())

  @@index([toEmail, createdAt])
}

model SignInAudit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String   @db.VarChar(255)
  ip        String?
  userAgent String?
  method    String   @default("email-otp")
  outcome   String   @default("success") // or "failure"
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Consent {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  policy      String
  version     String
  grantedAt   DateTime  @default(now())
  withdrawnAt DateTime?

  @@index([userId, policy])
}

model RateLimitBucket {
  key       String   @id // e.g. otp:email:user@example.com or otp:ip:1.2.3.4
  tokens    Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Journal {
  id                         String          @id @default(cuid())
  hasAnxietyAttack           Boolean?
  hasAvoidedSituations       Boolean?
  typesOfSituationYouAvoided String[] // array of strings
  whenDidItHappen            WhenDidItHappen
  typesOfSituationYouWereIn  String[]
  whyYourWereAvoidingIt      String[]
  typesOfBodySymptoms        String[]
  anxietyLevelRating         Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deletedAt])
}

model Challenge {
  id      String  @id @default(cuid())
  company Company

  status  ChallengeStatus   @default(NOT_STARTED)
  outcome ChallengeOutcome?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  challengeOptionId String
  challengeOption   Taxonomy @relation(fields: [challengeOptionId], references: [id], onDelete: Restrict)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, createdAt])
  @@index([deletedAt])
}

model ChallengeOutcome {
  id          String    @id @default(cuid())
  challengeId String    @unique
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  didComplete      Boolean
  reasonsNotDone   String[]
  hadAnxietyAttack Boolean?
  stoppedEarly     Boolean?
  stopReasons      String[] // was: whyDidYouStoppedTheChallenge
  actionsTaken     String[] // was: whatDidYouDo
  bodySymptoms     String[]
  anxietyLevel     Int?
  challengeRating  Int?
  copingStrategies String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
