// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  dob           DateTime?
  gender        Gender?
  image         String?
  deletedAt     DateTime? // soft delete

  signInAudits SignInAudit[]
  consents     Consent[]

  // NEW: relations
  challenges Challenge[]
  journals   Journal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model EmailOTP {
  id         String    @id @default(cuid())
  email      String    @db.VarChar(255)
  tokenHash  String    @db.VarChar(255)
  expiresAt  DateTime
  consumedAt DateTime?
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())
  ip         String?
  userAgent  String?

  @@index([email])
  @@index([expiresAt])
}

model EmailLog {
  id         String   @id @default(cuid())
  toEmail    String   @db.VarChar(255)
  template   String?
  providerId String?
  success    Boolean
  error      String?
  createdAt  DateTime @default(now())

  @@index([toEmail, createdAt])
}

model SignInAudit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String   @db.VarChar(255)
  ip        String?
  userAgent String?
  method    String   @default("email-otp")
  outcome   String   @default("success") // or "failure"
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Consent {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  policy      String
  version     String
  grantedAt   DateTime  @default(now())
  withdrawnAt DateTime?

  @@index([userId, policy])
}

model RateLimitBucket {
  key       String   @id // e.g. otp:email:user@example.com or otp:ip:1.2.3.4
  tokens    Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Journal {
  id                         String   @id @default(cuid())
  hasAnxietyAttack           Boolean?
  hasAvoidedSituations       Boolean?
  typesOfSituationYouAvoided String[] // array of strings
  typesOfSituationYouWereIn  String[]
  whyYourWereAvoidingIt      String[]
  typesOfBodySymptoms        String[]
  anxietyLevelRating         Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deletedAt])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Company {
  ALONE
  WITH_OTHERS
}

enum ChallengeStatus {
  NOT_STARTED
  FINISHED
}

model Challenge {
  id              String            @id @default(cuid())
  company         Company
  challengeOption Json
  status          ChallengeStatus   @default(NOT_STARTED)
  outcome         ChallengeOutcome?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deletedAt])
}

model ChallengeOutcome {
  id          String    @id @default(cuid())
  challengeId String    @unique
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  didComplete      Boolean
  reasonsNotDone   String[]
  hadAnxietyAttack Boolean?
  stoppedEarly     Boolean?
  stopReasons      String[] // was: whyDidYouStoppedTheChallenge
  actionsTaken     String[] // was: whatDidYouDo
  bodySymptoms     String[]
  anxietyLevel     Int?
  challengeRating  Int?
  copingStrategies String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
